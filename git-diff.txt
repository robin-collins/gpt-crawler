diff --git a/src/backup-crawler-output.ts b/src/backup-crawler-output.ts
index 77a13cd..c0ee720 100644
--- a/src/backup-crawler-output.ts
+++ b/src/backup-crawler-output.ts
@@ -12,6 +12,8 @@ async function calculateFileHash(filepath: string): Promise<string> {
   return hashSum.digest("hex");
 }
 
+// {primary.domain.url}-{outputFileName}-{outputFileFormat}{possibleUniqueIdentifier-Number}.ts
+
 async function backupCrawlerOutput() {
   try {
     // Get the domain from the URL and topic from config
@@ -68,18 +70,28 @@ async function backupCrawlerOutput() {
       // await fs.unlink(uniqueOutputPath);
       process.exit(1);
     }
-    console.log(`Output file hash verified: ${sourceOutputHash}`);
+// console.log(`Output file hash verified: ${sourceOutputHash}`);
 
     // Delete the original output file after successful verification
     await fs.unlink(outputFile);
-    console.log(`Original output file deleted: ${outputFile}`);
+// console.log(`Original output file deleted: ${outputFile}`);
 
     // --- Config File Handling ---
-    const configDestPath = path.join(backupDir, configFile);
-    const uniqueConfigPath = await getUniqueFilename(
-      configDestPath,
-      `${domainName}-${defaultConfig.outputFileFormat}`,
-    );
+    // Generate config filename based on domain, outputFileName, and outputFileFormat
+    const baseConfigName = `${domainName}-${defaultConfig.outputFileName}-${defaultConfig.outputFileFormat}`;
+    let configFilename = `${baseConfigName}.ts`;
+    let uniqueConfigPath = path.join(backupDir, configFilename);
+    let counter = 1;
+    while (true) {
+      try {
+        await fs.access(uniqueConfigPath);
+        configFilename = `${baseConfigName}-${counter}.ts`;
+        uniqueConfigPath = path.join(backupDir, configFilename);
+        counter++;
+      } catch {
+        break;
+      }
+    }
     await fs.copyFile(configFile, uniqueConfigPath);
 
     // Verify config file hash
@@ -94,15 +106,12 @@ async function backupCrawlerOutput() {
       // await fs.unlink(uniqueConfigPath);
       process.exit(1);
     }
-    console.log(`Config file hash verified: ${sourceConfigHash}`);
-
-    console.log(`
-Backup completed successfully:`);
-    console.log(
-      `Directory: ${defaultConfig.topic ? "Topic: " + defaultConfig.topic : "Domain: " + domainName}`,
-    );
-    console.log(`Backed up output file: ${uniqueOutputPath}`);
-    console.log(`Backed up config file: ${uniqueConfigPath}`);
+// console.log(`Config file hash verified: ${sourceConfigHash}`);
+
+    // console.log(`Backup completed successfully:`);
+    // console.log(`Directory: ${defaultConfig.topic ? "Topic: " + defaultConfig.topic : "Domain: " + domainName}`, );
+// console.log(`Backed up output file: ${uniqueOutputPath}`);
+// console.log(`Backed up config file: ${uniqueConfigPath}`);
   } catch (error) {
     console.error("Error during backup:", error);
     process.exit(1);
